PARSER_BEGIN(Pascal)
import java.io.*;
public class Pascal {

  public static void main(String args[]) throws ParseException,IOException {
    
    Pascal parser = new Pascal(new FileInputStream(args[0]));
    parser.Programa();
  }

}

PARSER_END(Pascal)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <PROGRAM: "program">
| <INTEIRO: "integer">
| <REAL: "real">
| <VAR: "var">
| <OF: "of">
| <FUNCTION: "function">
| <PROCEDURE: "procedure">
| <LBRACE:"(">
| <RBRACE: ")">
| <SEMI: ";">
| <TWODOT: ":">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <ARRAY: "array">
| <NUM: (["0"-"9"])+  ("."(["0"-"9"])+)? ("E"("+"|"-")?(["0"-"9"])+)?>
| <DOTDOT: "..">
| <BEGIN : "begin">
| <END : "end">
| <IF: "if">
| <THEN: "then">
| <ELSE: "else">
| <WHILE: "while">
| <DO: "do">
| <NOT: "not">
| <VIRG: ",">
}

TOKEN :
{ 
 <OPERADOR_MULTIPLICATIVO: ("*"|"/"|"div"|"mod"|"and")>
|
<OR: "or">
|
  < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
|
<OPERADOR_DE_ATRIBUICAO: ":=">
|
<OPERADOR_RELACIONAL: ("="|"<>"|"<"|"<="|">="|">")>

}



void Programa () :
{}
{ <PROGRAM> <ID> 
  <LBRACE> Lista_de_identificadores() <RBRACE> <SEMI> 
  Declaracoes() 
  Declaracoes_de_subprogramas() Enunciado_composto() "."
  <EOF> 
}
	

void Lista_de_identificadores():
{}
{
  <ID> Lista2()
}

void Lista2():
{}
{
 ("," <ID> Lista2())?
}

void Declaracoes():
{}
{
  (Declaracao())*
}

void Declaracao():
{}
{
  <VAR> Lista_de_identificadores() <TWODOT> Tipo() <SEMI>
}

void Tipo():
{}
{
  Tipo_padrao() | <ARRAY> <LBRACKET> <NUM> <DOTDOT> <OF> Tipo_padrao() 
}

void Tipo_padrao():
{}
{
 <INTEIRO> | <REAL>
}

void Declaracoes_de_subprogramas():
{}
{
 Declaracao_de_subprograma()
}

void Declaracao_de_subprograma():
{}
{
  (Cabecalho_de_subprograma() Enunciado_composto() <SEMI>)*

}

void Cabecalho_de_subprograma():
{}
{
  <FUNCTION> <ID> Argumentos() <TWODOT> Tipo_padrao() <SEMI> | <PROCEDURE> <ID> Argumentos() <SEMI>
}

void Argumentos():
{}
{
   ( <LBRACE> Lista_de_parametros() <RBRACE>)?
}

void Lista_de_parametros():
{}
{
  (Lista_de_identificadores() <TWODOT> Tipo())+
}

void Enunciado_composto():
{}
{
  <BEGIN> Enunciados_opcionais() <END>
}

void Enunciados_opcionais():
{}
{
  (Lista_de_enunciados())?

}

void Lista_de_enunciados():
{}
{
  Enunciado() (<SEMI> Enunciado())*
}

void Enunciado():
{}
{
  <ID> ((<LBRACKET> Expressao() <RBRACKET>)* <OPERADOR_DE_ATRIBUICAO> Expressao() | (<LBRACE> Lista_de_expressoes() <RBRACE>)*) | Enunciado_composto() | 
  <IF> Expressao() <THEN> Enunciado() <ELSE> Enunciado() | <WHILE> Expressao() <DO> Enunciado()

}

void Variavel():
{}
{
  <ID> (<LBRACKET> Expressao() <RBRACKET>)*
}

void Chamada_de_procedimento():
{}
{
  <ID> (<LBRACE> Lista_de_expressoes() <RBRACE>)*

} 

void Lista_de_expressoes():
{}
{
 Expressao() (<VIRG> Expressao())*
}

void Expressao():
{}
{
  Expressao_simples() (<OPERADOR_RELACIONAL> Expressao_simples())*
}

void Expressao_simples():
{}
{
   ("+"|"-")?  Termo() (("+"|"-"|<OR>) ("+"|"-")? Termo())*
}

void Termo():
{}
{
  Fator() (<OPERADOR_MULTIPLICATIVO> Fator())*

}

void Fator():
{}
{
  (<NOT>)* (<ID> (<LBRACE> Lista_de_expressoes() <RBRACE>)* | <NUM> | <LBRACE> Expressao() <RBRACE>)

}